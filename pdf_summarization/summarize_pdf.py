{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNZduH/oo/KjWLd1J37tToY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"L2RReq9K5SBT"},"outputs":[],"source":["import argparse\n","import PyPDF2\n","from vertexai.preview.generative_models import GenerativeModel\n","import backoff\n","import ratelimit\n","from google.api_core import exceptions\n","\n","# Set API Rate Limits\n","CALL_LIMIT = 20  # Max API calls per minute\n","ONE_MINUTE = 60  # Seconds in a minute\n","FIVE_MINUTES = 5 * ONE_MINUTE  # Retry limit\n","\n","\n","# Handle retries using exponential backoff\n","def backoff_handler(details):\n","    print(f\"Retrying in {details['wait']} seconds (Attempt {details['tries']})...\")\n","\n","\n","@backoff.on_exception(\n","    backoff.expo,\n","    (exceptions.ResourceExhausted, ratelimit.RateLimitException),\n","    max_time=FIVE_MINUTES,\n","    on_backoff=backoff_handler\n",")\n","@ratelimit.limits(calls=CALL_LIMIT, period=ONE_MINUTE)\n","def model_with_limit_and_backoff(prompt):\n","    \"\"\" Call the Gemini model with rate limiting and retry mechanisms \"\"\"\n","    generation_model = GenerativeModel(\"gemini-pro\")\n","    response = generation_model.generate_content([prompt])\n","    return response.candidates[0].content.parts[0].text if response.candidates else \"No summary generated.\"\n","\n","\n","def summarize_pdf(pdf_path):\n","    \"\"\" Extracts text from PDF and generates summaries \"\"\"\n","    reader = PyPDF2.PdfReader(pdf_path)\n","    summaries = []\n","\n","    for page_num, page in enumerate(reader.pages, 1):\n","        text = page.extract_text()\n","        if text:\n","            prompt = f\"Summarize the following text:\\n\\n{text}\"\n","            summary = model_with_limit_and_backoff(prompt)\n","            summaries.append(f\"ðŸ“„ **Page {page_num} Summary:**\\n{summary}\\n\" + \"-\"*80)\n","\n","    return \"\\n\\n\".join(summaries)\n","\n","\n","if __name__ == \"__main__\":\n","    parser = argparse.ArgumentParser(description=\"Summarize a PDF document.\")\n","    parser.add_argument(\"--pdf_file\", type=str, required=True, help=\"Path to the PDF file\")\n","    args = parser.parse_args()\n","\n","    print(\"\\nExtracting and Summarizing PDF...\\n\")\n","    final_summary = summarize_pdf(args.pdf_file)\n","    print(final_summary)\n","\n","    # Save the summary to a text file\n","    with open(\"mlops_summary.txt\", \"w\", encoding=\"utf-8\") as f:\n","        f.write(final_summary)\n","    print(\"\\nâœ… Summary saved to mlops_summary.txt\")\n"]}]}